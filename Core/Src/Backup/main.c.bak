/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
//#include "PL9823.h"
#include "PL9823_v2.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define GPIO_1 GPIOC
#define GPIO_1_num 0
#define GPIO_2 GPIOC
#define GPIO_2_num 1
#define GPIO_3 GPIOB
#define GPIO_3_num 13
#define GPIO_4 GPIOB
#define GPIO_4_num 14

// 8x8x8
//#define LED_per_strips 64
//#define DELAY_BETWEEN_SEND 3

// 16x16x16
#define LED_per_strips 256
#define DELAY_BETWEEN_SEND 11

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Bluetooth related */

// LED data array

//modified the first color for conv
uint8_t LEDdata[2048] = {0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef};
/* 8x8x8 TEST DATA */
/*
uint8_t LEDdata[256] = {
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88
	};
*/
/* END OF 8x8x8 TEST DATA */

/* 16x16x16 TEST DATA */
/*
uint8_t LEDdata[2048] = {
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,	0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,	0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,	0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,	0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,	0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,	0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	};
*/
/* END OF 16x16x16 TEST DATA */
	

uint8_t TX_complete = 1; 

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	/*
	if(huart->Instance == USART1) {
		HAL_UART_Receive_IT (&huart1, LEDdata, 2048);
	}
	*/
}
/* Bluetooth related END */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{	
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
	}else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
	}else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
	}else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
	}
	
	TX_complete = 1;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  MX_ADC2_Init();
  /* USER CODE BEGIN 2 */
	
	// set all preset colors
	PL9823_Presetinit();
	
	/* ONLY TURN ON IF RECEIVING STUFF FROM BT */
	HAL_UART_Receive_IT (&huart1, LEDdata, 2048);
	
	// functions to define //
	void GPIOSelect(uint32_t stage); //select the GIPOs needed. 
	void CUBE_16_Draw(); // draw 16 function
	
	/// GPIO initialize ///
	GPIO_1->ODR |= (1 <<GPIO_1_num);
	GPIO_2->ODR |= (1 <<GPIO_2_num);
	GPIO_3->ODR |= (1 <<GPIO_3_num);
	GPIO_4->ODR |= (1 <<GPIO_4_num);
	
	// GAUSSIAN HARD CODE ARRAY //
	/* GAUSSIAN 1
	uint32_t gaussian1[256] = {
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000,
		0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000,
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000,
		
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000,
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff,
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 
		
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 
			
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000 
	};
	*/
	/* GAUSSIAN 2
	uint32_t gaussian2[256] = {
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 

		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 
		0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
			
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 
		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 

    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 

		0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 

		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff,
		0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 
		0x000000, 0x000000, 0x000000, 0x000000, 0x0000ff, 0x000000, 0x000000, 0x000000 
	};
	*/
  
  
	
	
	/* LED data */
	TX_complete = 1; 
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		
		/* GAUSSIAN TEST W/ V1*/
		/*
		GPIO_1->ODR &= ~(1 <<GPIO_1_num);
		GPIO_2->ODR |= (1 <<GPIO_2_num);
		// both lines will work
		PL9823_ColorShiftC(gaussian1, 256, 1); 
		PL9823_ColorShiftC(gaussian1, 256, 2);
		HAL_Delay(20);
		GPIO_1->ODR |= (1 <<GPIO_1_num);
		GPIO_2->ODR &= ~(1 <<GPIO_2_num);
		// both lines will work
		PL9823_ColorShiftC(gaussian2, 256, 4);
		PL9823_ColorShiftC(gaussian2, 256, 3);
		HAL_Delay(20); 
		*/
		/* END OF GAUSSIAN TEST W/ V1 */
	
		/* BLUETOOTH TEST */
		/*
		if(data == 0x01){
			GPIO_1->ODR &= ~(1 <<GPIO_1_num);
			GPIO_2->ODR |= (1 <<GPIO_2_num);
			// both lines will work
			PL9823_ColorShiftC(gaussian1, 256, 1); 
			PL9823_ColorShiftC(gaussian1, 256, 2);
			HAL_Delay(20);
			GPIO_1->ODR |= (1 <<GPIO_1_num);
			GPIO_2->ODR &= ~(1 <<GPIO_2_num);
			// both lines will work
			PL9823_ColorShiftC(gaussian1, 256, 4);
   		PL9823_ColorShiftC(gaussian1, 256, 3);
			HAL_Delay(20); 
		}else{
			GPIO_1->ODR &= ~(1 <<GPIO_1_num);
			GPIO_2->ODR |= (1 <<GPIO_2_num);
			// both lines will work
			PL9823_ColorShiftC(gaussian1, 256, 4); 
			PL9823_ColorShiftC(gaussian1, 256, 3); 
			HAL_Delay(20);
			GPIO_1->ODR |= (1 <<GPIO_1_num);
			GPIO_2->ODR &= ~(1 <<GPIO_2_num);
			// both lines will work
			PL9823_ColorShiftC(gaussian1, 256, 2);
			PL9823_ColorShiftC(gaussian1, 256, 1);
			HAL_Delay(20); 
		}
		
		// HAL_Delay(500);
		// data ^= 1;
		
		*/
		/* END OF BLUETOOTH TEST */
	
		/* 8X8X8 */ 
		/*
		// Stage 1 
		GPIOSelect(1);
		// CHANNEL 1 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+1*LED_per_strips/2, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+2*LED_per_strips/2, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+3 *LED_per_strips/2, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// Stage 2
		GPIOSelect(2);
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*5, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*6, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*7, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		*/
		/* END OF 8X8X8 */
		
		/* 16x16x16 TEST */
		/*
		////////////// STAGE 1 /////////////
		GPIOSelect(1);
		// CHANNEL 1 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+1*LED_per_strips/2, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+2*LED_per_strips/2, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+3*LED_per_strips/2, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		
		////////////// STAGE 2 /////////////
		GPIOSelect(2);
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*4, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*5, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*6, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*7, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		
		////////////// STAGE 3 /////////////
		GPIOSelect(3);
		// CHANNEL 1 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*8, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*9, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*10, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*11, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		
		////////////// STAGE 4 /////////////
		GPIOSelect(4);
		// CHANNEL 1 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*12, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*13, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*14, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*15, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		*/
		/* END OF 16X16X16 TEST */
		//__HAL_UART_ENABLE_IT(&huart1,UART_IT_RTO);
		CUBE_16_Draw();
		HAL_UART_Receive_IT (&huart1, LEDdata, 2048);
		//HAL_UART_Receive_DMA(&huart1, LEDdata, 2048);
		
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/* USER CODE BEGIN 4 */

void GPIOSelect(uint32_t stage){
	//select stage.
	switch (stage){
		case 1:
			GPIO_1->ODR &= ~(1 << GPIO_1_num);
			GPIO_2->ODR |= (1 << GPIO_2_num);
			GPIO_3->ODR |= (1 << GPIO_3_num);
			GPIO_4->ODR |= (1 << GPIO_4_num);
			break;
		case 2:
			GPIO_1->ODR |= (1 << GPIO_1_num);
			GPIO_2->ODR &= ~(1 << GPIO_2_num);
			GPIO_3->ODR |= (1 << GPIO_3_num);
			GPIO_4->ODR |= (1 << GPIO_4_num);
			break;
		case 3:
			GPIO_1->ODR |= (1 << GPIO_1_num);
			GPIO_2->ODR |= (1 << GPIO_2_num);
			GPIO_3->ODR &= ~(1 << GPIO_3_num);
			GPIO_4->ODR |= (1 << GPIO_4_num);
			break;
		case 4:
			GPIO_1->ODR |= (1 << GPIO_1_num);
			GPIO_2->ODR |= (1 << GPIO_2_num);
			GPIO_3->ODR |= (1 << GPIO_3_num);
			GPIO_4->ODR &= ~(1 << GPIO_4_num);
			break;
		default:
			break;
	}
	return;
}

void CUBE_16_Draw(){ //Draw the 16x16x16 CUBE. 
		GPIOSelect(1);
		// CHANNEL 1 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+1*LED_per_strips/2, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+2*LED_per_strips/2, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+3*LED_per_strips/2, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		
		////////////// STAGE 2 /////////////
		GPIOSelect(2);
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*4, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*5, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*6, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*7, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		
		////////////// STAGE 3 /////////////
		GPIOSelect(3);
		// CHANNEL 1 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*8, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*9, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*10, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*11, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
		
		////////////// STAGE 4 /////////////
		GPIOSelect(4);
		// CHANNEL 1 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*12, LED_per_strips, 1);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 2 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*13, LED_per_strips, 2);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 3
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*14, LED_per_strips, 3);
		HAL_Delay(DELAY_BETWEEN_SEND);
		// CHANNEL 4 
		while(TX_complete == 0x00);
		TX_complete = 0;
		PL9823_sendchannelPreset(LEDdata+LED_per_strips/2*15, LED_per_strips, 4);
		HAL_Delay(DELAY_BETWEEN_SEND);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
